@page "/MainWebsite/FundraiserCampaigns"
@layout MainLayout
@inject CustomAuthStateProvider AuthStateProvider
@inject IMainWebsite _Main
@inject IJSRuntime _JS
@inject NavigationManager _Nav
<PageTitle>Fundraiser Campaigns</PageTitle>

<article class="p-5 m-5">
    <h2 class="fw-bold text-success text-center mb-2">Campaigns</h2>
    <p class="text-muted text-center mb-5">
        Discover active campaigns you can support today.
    </p>

    <!-- Container with filter buttons centered and dropdown at the right -->
    <div class="d-flex justify-content-around mb-4">
        @if (isAuth)
        {
            <!-- Filter Buttons (centered) -->
            <div class="btn-group" role="group" aria-label="Campaign Filter">
                <button type="button" class="btn btn-outline-primary fw-bold border-2 me-2" @onclick="ShowAllCampaigns">All Campaigns</button>
                <button type="button" class="btn btn-outline-warning fw-bold border-2 me-2" @onclick="ShowMyCampaigns">My Campaigns</button>

            </div>
            <button type="button" class="btn btn-success fw-bold border-2 me-2" @onclick="RedirectToAddCampaign">Add your own Fundraiser Campaign</button>

        }
        <!-- Sort Dropdown (right side) -->
        <div class="dropdown">
            <button class="btn btn-outline-primary dropdown-toggle fw-bold" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                Sort By <i class="fas fa-sort"></i> <!-- Sort Icon -->
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <li><a class="dropdown-item" @onclick="SortCampaignsByTitleAscending"><i class="fas fa-sort-alpha-down"></i> Sort by Title (A-Z)</a></li>
                <li><a class="dropdown-item" @onclick="SortCampaignsByTitleDescending"><i class="fas fa-sort-alpha-up"></i> Sort by Title (Z-A)</a></li>
                <li><a class="dropdown-item" @onclick="SortCampaignsByTargetAmountAscending"><i class="fas fa-arrow-up"></i> Sort by Target Amount (Asc)</a></li>
                <li><a class="dropdown-item" @onclick="SortCampaignsByTargetAmountDescending"><i class="fas fa-arrow-down"></i> Sort by Target Amount (Desc)</a></li>
                <li><a class="dropdown-item" @onclick="SortCampaignsByTotalFundAscending"><i class="fas fa-arrow-up"></i> Sort by Total Fund (Asc)</a></li>
                <li><a class="dropdown-item" @onclick="SortCampaignsByTotalFundDescending"><i class="fas fa-arrow-down"></i> Sort by Total Fund (Desc)</a></li>
                <li><a class="dropdown-item" @onclick="SortCampaignsByProgressPercentage"><i class="fas fa-tachometer-alt"></i> Sort by Progress Percentage</a></li>
            </ul>
        </div>
    </div>

    <div class="row g-4" id="campaignContainer">
        @foreach (var campaign in FilteredCampaignModels)
        {
            <div class="col-md-4 card-wrapper visible">
                <div class="campaign-card d-flex flex-column h-100"
                     id="CampaignId"
                     data-campaign-id="@campaign.CampaignId"
                     data-title="@campaign.Title"
                     data-description="@campaign.Description"
                     data-target-amount="@campaign.TargetAmount"
                     data-creation-date="@campaign.ApprovalDate?.ToString("yyyy-MM-dd")"
                     data-total-fund-collected="@campaign.TotalFundCollected"
                     data-image-path="@campaign.ImagePath">

                    @if (!string.IsNullOrEmpty(campaign.ImagePath))
                    {
                        <div class="campaign-image-container mb-2" style="position: relative; width: 100%; padding-top: 75%; overflow: hidden; border-radius: 0.5rem;">
                            <img src="@campaign.ImagePath" alt="Campaign Image" loading="lazy"
                                 style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;" />
                        </div>
                    }

                    <div class="d-flex justify-content-between">
                        <h5>@campaign.Title</h5>
                        <p>Created by: @campaign.CreatorName</p>
                    </div>
                    <div class="d-flex flex-row justify-content-between gap-5">
                        <p class="text-success">
                            @((campaign.TotalFundCollected ?? 0)) Raised
                        </p>
                        <p class="text-success">
                            @((campaign.TargetAmount ?? 0)) Funds Target
                        </p>
                    </div>

                    <div class="progress mb-2">
                        <div class="progress-bar bg-success"
                             style="width: @(campaign.TotalFundCollected / (campaign.TargetAmount ?? 1) * 100)%"
                             id="Progress">
                            @Math.Round(((campaign.TotalFundCollected ?? 0) / (campaign.TargetAmount ?? 1)) * 100, 1)%
                        </div>
                    </div>
                    <p class="text-muted small">
                        Approved Date: @(campaign.ApprovalDate?.ToString("MMMM dd, yyyy"))
                    </p>

                    <!-- Conditional Buttons Display -->
                    <div class="d-flex justify-content-between mt-auto">
                        <NavLink href="@GetCampaignDetailsUrl(campaign.CampaignId)" class="btn btn-outline-primary w-50">
                            Campaign Details
                        </NavLink>
                        <NavLink href="@GetDonateUrl(campaign.CampaignId)" class="btn btn-success w-25">
                            Donate
                        </NavLink>
                    </div>
                </div>
            </div>
        }
    </div>
</article>

@code {
    public List<CampaignModel> CampaignModels { get; set; } = new List<CampaignModel>();
    public List<CampaignModel> FilteredCampaignModels { get; set; } = new List<CampaignModel>();
    public AuthModel Auth { get; set; } = new AuthModel();
    private bool isAuth;
    private int? UserId;

    protected override async Task OnInitializedAsync()
    {
        isAuth = false;
        await CampaignSelectAsync();
        FilteredCampaignModels = CampaignModels.Where(c => c.CampaignId > 1).ToList(); // Initially show all campaigns
    }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {

        }

        try
        {
            var userIdstring = await _JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            if (!string.IsNullOrWhiteSpace(userIdstring))
            {
                UserId = int.Parse(userIdstring);

            }

            if (UserId == null)
            {
                isAuth = false;
            }
            else
            {
                isAuth = true;
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }

    }
    private async Task CampaignSelectAsync()
    {
        JArray result;
        if (UserId != null)
        {
            result = await _Main.CampaignsSelectAsync(new { UserId = UserId });

        }
        else
        {
            result = await _Main.CampaignsSelectAsync();
        }

        var resultData = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Result<List<CampaignModel>>>>(result.ToString());

        if (resultData != null && resultData.Any())
        {
            CampaignModels = resultData.FirstOrDefault()?.Data;
        }
    }

    // Method to generate the URL with campaignId
    private string GetCampaignDetailsUrl(int campaignId)
    {
        return $"/MainWebsite/CampaignDetails/?campaignId={campaignId}";
    }

    private string GetDonateUrl(int campaignId)
    {
        return $"/MainWebsite/Donate/?campaignId={campaignId}";
    }

    private void ShowAllCampaigns()
    {
        FilteredCampaignModels = CampaignModels.ToList();
    }

    private void ShowMyCampaigns()
    {
        FilteredCampaignModels = CampaignModels.Where(x => x.CreatorId == UserId).ToList();
    }

    private void RedirectToAddCampaign()
    {
        // Navigate to the Add Need page
        _Nav.NavigateTo("/MainWebsite/AddCampaign");
    }

    // Sorting methods
    private void SortCampaignsByTitleAscending() => FilteredCampaignModels = FilteredCampaignModels.OrderBy(c => c.Title).ToList();
    private void SortCampaignsByTitleDescending() => FilteredCampaignModels = FilteredCampaignModels.OrderByDescending(c => c.Title).ToList();
    private void SortCampaignsByTargetAmountAscending() => FilteredCampaignModels = FilteredCampaignModels.OrderBy(c => c.TargetAmount).ToList();
    private void SortCampaignsByTargetAmountDescending() => FilteredCampaignModels = FilteredCampaignModels.OrderByDescending(c => c.TargetAmount).ToList();
    private void SortCampaignsByTotalFundAscending() => FilteredCampaignModels = FilteredCampaignModels.OrderBy(c => c.TotalFundCollected).ToList();
    private void SortCampaignsByTotalFundDescending() => FilteredCampaignModels = FilteredCampaignModels.OrderByDescending(c => c.TotalFundCollected).ToList();
    private void SortCampaignsByProgressPercentage() => FilteredCampaignModels = FilteredCampaignModels.OrderByDescending(c => (c.TotalFundCollected ?? 0) / (c.TargetAmount ?? 1) * 100).ToList();
}
