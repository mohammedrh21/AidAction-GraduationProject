@page "/MainWebsite/CampaignRequestsDetails/"
@layout MainLayout
@inject NavigationManager _Nav
@inject IMainWebsite _Main
<!-- Campaign details-->
<article class="m-5 p-5">
    <div class="row">
        <div class="text-center mb-5  @(CampaignModel.ApproveStatus? "text-success" : "text-danger")">
            <button class="btn @(CampaignModel.ApproveStatus? "btn-success" : "btn-danger")">@(CampaignModel.ApproveStatus ? "Approved" : "Pending")</button>
        </div>
        <div class="col-md-6 mb-4">
            <img id="ImagePath"
                 src="@CampaignModel.ImagePath"
                 class="img-fluid rounded shadow h-75 w-80"
                 alt="Campaign Image" />
        </div>

        <div class="col-md-6">
            <h2 id="Title" class="text-success fw-bold">
                @CampaignModel.Title
            </h2>
            <p id="Description">
                @CampaignModel.Description
            </p>
            <p class="text-muted mb-2">
                <strong>Approved On:</strong> <span id="CreationDate">@(CampaignModel.ApprovalDate?.ToString("MMMM dd, yyyy"))</span>
            </p>
            <p class="text-muted mb-2">
                <strong>Target Amount:</strong> $<span id="TargetAmount">@CampaignModel.TargetAmount</span>
            </p>
            <p class="text-muted mb-2">
                <strong>Total Raised:</strong> $<span id="TotalFundCollected">@CampaignModel.TotalFundCollected</span>
            </p>
            <div class="progress mb-2">
                <div class="progress-bar bg-success" style="width: @(CampaignModel.TotalFundCollected / (CampaignModel.TargetAmount ?? 1) * 100)%">
                    @Math.Round(((CampaignModel.TotalFundCollected ?? 0) / (CampaignModel.TargetAmount ?? 1)) * 100, 1)%
                </div>
            </div>

            <hr />
            <div class="d-flex justify-content-start align-items-center">
                <NavLink href="/MainWebsite/FundraiserCampaignsRequests" class="me-3 d-flex w-25 justify-content-center align-items-center btn btn-primary">
                    Back
                </NavLink>
            </div>

        </div>
    </div>
</article>

@code {
    private string base64Image;
    [Parameter]
    public int campaignId { get; set; }

    protected override void OnInitialized()
    {
        // Access the query string
        var uri = _Nav.ToAbsoluteUri(_Nav.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("campaignId", out var campaignIdValue))
        {
            // Parse the campaignId from the query string
            campaignId = int.Parse(campaignIdValue);
        }
    }

    public CampaignModel CampaignModel { get; set; } = new CampaignModel();

    protected override async Task OnInitializedAsync()
    {
        await CampaignRequestSelectAsync(new { CampaignId = campaignId });
    }

    private async Task CampaignRequestSelectAsync(object o)
    {
        // Fetch the JSON response from the backend
        var result = await _Main.CampaignRequestSelectAsync(o);

        // Deserialize the JSON into a list of Result objects containing a list of CampaignsModel
        var resultData = Newtonsoft.Json.JsonConvert.DeserializeObject<Result<List<CampaignModel>>>(result.ToString());

        if (resultData != null)
        {
            // Access the first item in the array and assign its Data field (list of Campaigns) to CampaignModels
            CampaignModel = resultData?.Data.FirstOrDefault(x=>x.CampaignId == campaignId);
        }
    }
}