@page "/Auth/ResetPassword"
@layout SecondaryLayout
@inject NavigationManager Navigation
@inject IMainWebsite _Main
@inject IJSRuntime JS
<PageTitle>Reset Password</PageTitle>
<div class="d-flex justify-content-center align-items-center vh-100" style="background: linear-gradient(135deg, #e0f7fa 50%, #ffffff 50%);">
    <div class="card shadow-lg p-4" style="width: 100%; max-width: 400px;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">
                <i class="bi bi-lock-fill me-2"></i>Reset Password
            </h3>

            <div class="mb-3">
                <label for="emailInput" class="form-label">
                    <i class="bi bi-envelope-fill me-2"></i>Enter your email address:
                </label>
                <input type="email" id="emailInput" class="form-control" @bind="UserEmail" placeholder="you@example.com">
            </div>

            <div class="d-grid">
                <button class="btn btn-primary" @onclick="HandleResetPasswordRequest" disabled="@IsProcessing">
                    <i class="bi bi-send-fill me-2"></i>
                    @(IsProcessing ? "Sending..." : "Send Reset Link")
                </button>
            </div>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert alert-info mt-3 text-center">@Message</div>
            }
        </div>
    </div>
</div>

@code {
    private string UserEmail { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;

    private bool IsProcessing { get; set; } = false;

    private async Task HandleResetPasswordRequest()
    {
        if (string.IsNullOrWhiteSpace(UserEmail))
        {
            Message = "Please enter your email.";
            return;
        }

        IsProcessing = true; // Disable button

        try
        {
            var token = Guid.NewGuid().ToString();
            await JS.InvokeVoidAsync("localStorage.setItem", "resetToken", token);
            await JS.InvokeVoidAsync("localStorage.setItem", "UserEmail", UserEmail);

            await Task.Delay(500);

            var resetLink = Navigation.BaseUri + $"Auth/ChangePassword?token={token}";
            await SendResetPasswordEmail(UserEmail, resetLink);

            Message = "Reset link has been sent to your email.";
        }
        catch
        {
            Message = "Failed to send reset link.";
        }
        finally
        {
            IsProcessing = false; // Enable button again
        }
    }


    private async Task SendResetPasswordEmail(string email, string resetLink)
    {
        try
        {
            var message = new MimeKit.MimeMessage();
            message.From.Add(new MimeKit.MailboxAddress("Aid Action Platform", "aidactionplatform@gmail.com"));
            message.To.Add(new MimeKit.MailboxAddress("", email));
            message.Subject = "Reset your password - Aid Action Platform";

            message.Body = new MimeKit.TextPart("plain")
                {
                    Text = $"Hello,\n\nYou requested to reset your password.\nPlease click the following link to reset it:\n\n{resetLink}\n\nIf you did not request this, please ignore this email.\n\nThanks."
                };

            using var client = new MailKit.Net.Smtp.SmtpClient();
            client.ServerCertificateValidationCallback = (s, c, h, e) => true;

            await client.ConnectAsync("smtp.sendgrid.net", 587, MailKit.Security.SecureSocketOptions.StartTls);
            await client.AuthenticateAsync("apikey", "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");

            await client.SendAsync(message);
            await client.DisconnectAsync(true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Message = "Failed to send email.";
        }
    }
}
