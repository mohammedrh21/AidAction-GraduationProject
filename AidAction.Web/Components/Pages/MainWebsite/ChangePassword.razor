@page "/Auth/ChangePassword"
@layout SecondaryLayout
@inject NavigationManager Navigation
@inject IMainWebsite _Main
@inject IJSRuntime JS
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Change Password</PageTitle>

<div class="d-flex justify-content-center align-items-center vh-100" style="background: linear-gradient(135deg, #f0f4ff 50%, #ffffff 50%);">
    <div class="card shadow-lg p-4" style="width: 100%; max-width: 400px;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">
                <i class="bi bi-shield-lock-fill me-2"></i>Change Password
            </h3>

            @if (string.IsNullOrEmpty(Token))
            {
                <div class="alert alert-danger text-center">
                    Invalid or missing token.
                </div>
            }
            else
            {
                <div class="mb-3">
                    <label for="newPassword" class="form-label">
                        <i class="bi bi-key-fill me-2"></i>New Password:
                    </label>
                    <input type="password" id="newPassword" class="form-control" @bind="NewPassword" placeholder="Enter new password">
                </div>

                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">
                        <i class="bi bi-key-fill me-2"></i>Confirm Password:
                    </label>
                    <input type="password" id="confirmPassword" class="form-control" @bind="ConfirmPassword" placeholder="Confirm new password">
                </div>

                <div class="d-grid">
                    <button class="btn btn-success" @onclick="SubmitNewPassword" disabled="@IsProcessing">
                        <i class="bi bi-arrow-repeat me-2"></i>
                        @(IsProcessing ? "Changing..." : "Change Password")
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="alert alert-info mt-3 text-center">@Message</div>
                }
            }
        </div>
    </div>
</div>

@code {
    private string Token { get; set; } = string.Empty;
    private string StoredToken { get; set; } = string.Empty;
    private string StoredEmail { get; set; } = string.Empty;

    private string NewPassword { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private bool IsProcessing { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
            {
                Token = token;
            }

            StoredToken = await JS.InvokeAsync<string>("localStorage.getItem", "resetToken");
            await Task.Delay(500);
            StoredEmail = await JS.InvokeAsync<string>("localStorage.getItem", "UserEmail");
            await Task.Delay(500);

            StateHasChanged();
        }
    }

    private async Task SubmitNewPassword()
    {
        if (string.IsNullOrEmpty(NewPassword) || string.IsNullOrEmpty(ConfirmPassword))
        {
            Message = "Please fill all fields.";
            return;
        }

        if (NewPassword != ConfirmPassword)
        {
            Message = "Passwords do not match.";
            return;
        }

        if (string.IsNullOrEmpty(Token))
        {
            Message = "Invalid or missing token.";
            return;
        }

        IsProcessing = true;

        try
        {
            var isValidToken = await VerifyResetToken(Token);

            if (!isValidToken)
            {
                Message = "Invalid token. Please request a new password reset link.";
                return;
            }

            var isPasswordUpdated = await UpdatePasswordInDatabase(NewPassword);

            if (isPasswordUpdated)
            {
                Message = "Your password has been successfully changed!";
                StateHasChanged();
                await Task.Delay(5000);
                Navigation.NavigateTo("/Auth/Login");
            }
            else
            {
                Message = "Failed to change your password. Please try again.";
            }
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private async Task<bool> VerifyResetToken(string token)
    {
        await Task.Delay(500);
        return token == StoredToken;
    }

    private async Task<bool> UpdatePasswordInDatabase(string newPassword)
    {
        var result = await _Main.DonorPasswordUpdateAsync(new { Email = StoredEmail, Password = newPassword });

        var resultData = Newtonsoft.Json.JsonConvert.DeserializeObject<Result<List<DonorModel>>>(result.ToString());
        return resultData.rv > 0;
    }
}
