@page "/ControlPanel/WebDetails"
@layout ControlPanelLayout
@inject IControlPanel _Control
@inject IJSRuntime JS
@inject NavigationManager Navigation
<PageTitle>Website Details</PageTitle>
<h2 class="fw-bold text-success text-center mb-4">Edit camp details</h2>

@* Message Alert *@
@if (!string.IsNullOrWhiteSpace(DB.Msg))
{
    <div class="alert w-50 @(DB.rv > 0 ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
        @DB.Msg
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<div class="container py-5 ">
    <EditForm class="d-flex flex-row justify-content-around" Model="@webDetails" OnValidSubmit="HandleValidSubmit" FormName="webDetailsSave">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="w-50">
            <div class="mb-3">
                <label for="Title" class="form-label">Title</label>
                <InputText id="Title" class="form-control" @bind-Value="webDetails.Title" />
            </div>

            <div class="mb-3">
                <label for="AboutCamp" class="form-label">AboutCamp</label>
                <InputTextArea id="AboutCamp" class="form-control" @bind-Value="webDetails.AboutCamp" />
            </div>

            <div class="mb-3">
                <label for="imageFile" class="form-label">Select Image File</label>
                <InputFile id="imageFile" class="form-control" OnChange="HandleFileSelected" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="LocationLongtitude">Location Longtitude</label>
                <InputNumber id="LocationLongtitude" class="form-control" @bind-Value="webDetails.LocationLongitude" />
            </div>

            <div class="mb-3">
                <label for="LocationLatitude" class="form-label">Location Latitude</label>
                <InputNumber id="LocationLatitude" class="form-control" @bind-Value="webDetails.LocationLatitude" />
            </div>

            <div class="mb-3">
                <label for="IBAN" class="form-label">IBAN</label>
                <InputText id="IBAN" class="form-control" @bind-Value="webDetails.IBAN" />
            </div>
        </div>

        <div class="border"></div>

        <div>
            <div class="mb-3">
                <label for="FacebookURL" class="form-label">Facebook URL</label>
                <InputText id="FacebookURL" class="form-control" @bind-Value="webDetails.FacebookURL" />
            </div>

            <div class="mb-3">
                <label for="InstagramURL" class="form-label">Instagram URL</label>
                <InputText id="InstagramURL" class="form-control" @bind-Value="webDetails.InstagramURL" />
            </div>

            <div class="mb-3">
                <label for="TikTokURL" class="form-label">TikTok URL</label>
                <InputText id="TikTokURL" class="form-control" @bind-Value="webDetails.TikTokURL" />
            </div>

            <div class="mb-3">
                <label for="PhoneNumber" class="form-label">PhoneNumber</label>
                <InputText id="PhoneNumber" class="form-control" @bind-Value="webDetails.PhoneNumber" />
            </div>

            <div class="mb-3">
                <label for="Email" class="form-label">Email</label>
                <InputText id="Email" class="form-control" @bind-Value="webDetails.Email" />
            </div>
        </div>
        <hr>
        <hr>
        <div class="position-absolute min-w-100" style="bottom: 25%; left: 72%;">
            <button type="submit" class="btn btn-outline-success px-5 w-100">Submit</button>
        </div>

    </EditForm>


</div>
@code {
    private int UserId;
    private WebsiteDetails webDetails = new WebsiteDetails();
    private IBrowserFile selectedFile;
    public Result<List<WebsiteDetails>> DB { get; set; } = new Result<List<WebsiteDetails>>();

    protected override void OnInitialized()
    {
        WebsiteDetailsSelect();
    }

    // Triggered when a file is selected; stores the file for later upload.
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            selectedFile = e.File;
        }
    }

    public async Task WebsiteDetailsSelect()
    {
        var result = await _Control.WebsiteDetailsSelectAsync();
        var resultData = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Result<List<WebsiteDetails>>>>(result.ToString());
        webDetails = resultData.FirstOrDefault().Data.FirstOrDefault();
        StateHasChanged(); // Trigger re-render to update UI with the new data
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Retrieve the user's id from localStorage.
            var userIdString = await JS.InvokeAsync<string>("localStorage.getItem", "UserId");
            if (!string.IsNullOrEmpty(userIdString))
            {
                UserId = int.Parse(userIdString);
            }
            webDetails.CreatedBy = UserId;
            webDetails.Id = 1;
            // If an image file was selected, save it and update the image path.
            if (selectedFile != null)
            {
                webDetails.ImagePath = await SaveImageAsync(selectedFile);
            }

            // Save the new need via the backend service.
            var result = await _Control.WebsiteDetailsSaveAsync(webDetails);

            var resultData = Newtonsoft.Json.JsonConvert.DeserializeObject<Result<List<WebsiteDetails>>>(result.ToString());
            DB.rv = resultData.rv;
            DB.Msg = resultData.Msg;
            StateHasChanged();
            await Task.Delay(1000);
            Navigation.NavigateTo("/ControlPanel/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
    }

    // Saves the image file to wwwroot/images and returns the relative URL.
    private async Task<string> SaveImageAsync(IBrowserFile file)
    {
        // Generate unique file name using GUID to avoid collisions.
        var fileName = Path.Combine("wwwroot", "images", Guid.NewGuid().ToString() + Path.GetExtension(file.Name));

        // Write the file to disk.
        using (var fileStream = new FileStream(fileName, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(fileStream);
        }

        // Return the relative path to the image to be stored in the database.
        return $"/images/{Path.GetFileName(fileName)}";
    }
}
