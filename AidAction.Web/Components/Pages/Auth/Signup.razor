@page "/Auth/Signup"
@layout SecondaryLayout
@inject IMainWebsite _mainWebsite
@inject IAuthService _auth
@inject IAuthRepository _authRep
@inject NavigationManager _nav
@inject IJSRuntime JS

@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer

<div class="signup-body">
    @if (showMessage)
    {

        if (dBResult.rv != null)
        {
            if (dBResult.rv != null)
            {
                <div style="z-index:1" class="alert @(dBResult.rv == "1" ? "alert-success" : "alert-danger")">
                    @(dBResult.rv == "1" ? "Registration success, Redirecting..." : dBResult.Msg)
                </div>
            }
        }
    }@* 
<div class="signup-container">
    <h2>Become a donor</h2>
     <EditForm Model="Donor" OnValidSubmit="DonorSaveAsync" FormName="FormName">
         <div>
              <InputText @bind-Value="Donor.FirstName" placeholder="First Name" required></InputText>
              <InputText @bind-Value="Donor.LastName" placeholder="Last Name" required></InputText>
          </div>
          <div>
                <InputText @bind-Value="Donor.Email" placeholder="Email Address" required></InputText>
                <InputText @bind-Value="Donor.Password" onclick="Toggle" type="password" placeholder="Password" required></InputText>
                <InputDate @bind-Value="Donor.DOB" required></InputDate>
          </div>
          <button type="submit" class="btn btn-primary">Sign Up</button>
          </EditForm>
     <p>Already have an account? <NavLink href="/Auth/login">Login here</NavLink></p>
</div> *@

    <div class="signup-body">
        <div class="signup-wrapper">
            <div class="signup-container">
                <h2>Sign Up - Aid Action</h2>

                <!-- Using Blazor's EditForm and binding the data to SignUpModel -->
                <EditForm Model="Donor" OnValidSubmit="DonorSaveAsync" FormName="SignUpForm">
                    <!-- First Name Field -->
                    <div class="input-group">
                        <label for="firstName"><i class="fas fa-user"></i> First Name</label>
                        <InputText @bind-Value="Donor.FirstName" placeholder="Enter your first name" required />
                    </div>

                    <!-- Last Name Field -->
                    <div class="input-group">
                        <label for="lastName"><i class="fas fa-user"></i> Last Name</label>
                        <InputText @bind-Value="Donor.LastName" placeholder="Enter your last name" required />
                    </div>

                    <!-- Email Field -->
                    <div class="input-group">
                        <label for="email"><i class="fas fa-envelope"></i> Email</label>
                        <InputText @bind-Value="Donor.Email" type="email" placeholder="Enter your email" required />
                    </div>

                    <!-- Password Field -->
                    <div class="input-group">
                        <label for="password"><i class="fas fa-lock"></i> Password</label>
                        <InputText @bind-Value="Donor.Password" type="password" placeholder="Enter your password" required />
                    </div>

                    <!-- Date of Birth Field -->
                    <div class="input-group">
                        <label for="dob"><i class="fas fa-calendar-alt"></i> Date of Birth</label>
                        <InputDate @bind-Value="Donor.DOB" required />
                    </div>

                    <button type="submit" class="signup-btn">Sign Up</button>
                </EditForm>

                <!-- Links section -->
                <div class="links">
                    <NavLink href="/Auth/Login" class="login-link"><i class="fas fa-sign-in-alt"></i> Already have an account?</NavLink>
                </div>
            </div>
        </div>
    </div>


</div>

@code {
    bool showMessage = false;
    [SupplyParameterFromForm]
    public DonorSaveDTO Donor { get; set; } = new DonorSaveDTO() { DOB = DateTime.Now };

    DBResult dBResult = new DBResult();

    private async Task DonorSaveAsync()
    {
        DonorModel _donor = new DonorModel()
            {
                DOB = Donor.DOB,
                FirstName = Donor.FirstName,
                LastName = Donor.LastName,
                Email = Donor.Email,
                Password = Donor.Password
            };

        var result = await _mainWebsite.DonorSaveAsync(_donor);
        if (result != null)
        {
            dBResult = Newtonsoft.Json.JsonConvert.DeserializeObject<DBResult>(result.ToString());

            if (int.Parse(dBResult.rv) > 0)
            {
                var authResult = await AuthenticateAsync(dBResult);
                if (authResult.IsAuthenticated)
                {
                    showMessage = true;
                    StateHasChanged();
                    await Task.Delay(200);
                    JS.InvokeVoidAsync("localStorage.setItem", "Token", authResult.Token);
                    await Task.Delay(500);

                    _nav.NavigateTo("/");
                }
            }
            else
            {
                showMessage = true; // Show the failure message
                StateHasChanged(); // Update the UI to display the failure message
            }
        }
        else
        {
            dBResult.rv = "-1";
            dBResult.Msg = "Internal Server Error";
            showMessage = true; // Show the failure message
            StateHasChanged(); // Update the UI to display the error
        }
    }


    private async Task<AuthModel> AuthenticateAsync(DBResult _dBResult)
    {
        var result = await _auth.AuthenticateAsync(_dBResult);
        if (result.IsAuthenticated)
        {
            await _authRep.SaveTokenAsync(new { result.UserId, result.UserType, result.Token });
        }
        return result;
    }
}
